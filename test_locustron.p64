picotron cartridge // www.picotron.net
version 2

:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTEwLTEyIDE0OjQ5OjMwIixtb2RpZmllZD0iMjAyNS0x
MC0yNSAyMTowNTo0NSIscnVudGltZT0yMSx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJ0ZXN0X2xvY3VzdHJvbi5sdWEjMTYzIix3
b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJsaWIvbG9jdXN0cm9uLmx1YSIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0ibGliL2JlbmNobWFya19jb21wYWN0Lmx1YSIsd29ya3NwYWNl
X2luZGV4PTF9fV1d
:: benchmark_compact.lua
b64$LS0gQ29tcGFjdCBCZW5jaG1hcmsgU3VpdGUgZm9yIExvY3VzdHJvbgotLSBUZXN0cyBtZW1v
cnkgYWxsb2NhdGlvbiB2cyBxdWVyeSBvcHRpbWl6YXRpb24gdHJhZGUtb2ZmcwotLSBSdW4gaW4g
UGljb3Ryb24gY29uc29sZTogaW5jbHVkZSgiYmVuY2htYXJrX2NvbXBhY3QubHVhIikKCmluY2x1
ZGUoImxpYi9yZXF1aXJlLmx1YSIpCmxvY2FsIGxvY3VzdHJvbiA9IHJlcXVpcmUoImxpYi9sb2N1
c3Ryb24iKQoKLS0gQmVuY2htYXJrIENvbmZpZ3VyYXRpb24KbG9jYWwgR1JJRF9TSVpFUyA9IHsx
NiwgMzIsIDY0LCAxMjh9CmxvY2FsIE9CSkVDVF9TSVpFUyA9IHsKICAge25hbWUgPSAidGlueSIs
IHcgPSA0LCBoID0gNH0sCiAgIHtuYW1lID0gInNtYWxsIiwgdyA9IDgsIGggPSA4fSwKICAge25h
bWUgPSAibWVkaXVtIiwgdyA9IDE2LCBoID0gMTZ9LAogICB7bmFtZSA9ICJsYXJnZSIsIHcgPSAz
MiwgaCA9IDMyfQp9CmxvY2FsIE9CSkVDVF9DT1VOVCA9IDUwIC0tIFJlZHVjZWQgZm9yIFBpY290
cm9uIHBlcmZvcm1hbmNlCmxvY2FsIFFVRVJZX1NJWkUgPSA2NAoKLS0gVXRpbGl0eSBmdW5jdGlv
bnMKZnVuY3Rpb24gY3JlYXRlX3Rlc3Rfb2JqZWN0cyhjb3VudCwgb2JqX3NpemUpCiAgIGxvY2Fs
IG9iamVjdHMgPSB7fQogICBmb3IgaSA9IDEsIGNvdW50IGRvCiAgICAgIG9iamVjdHNbaV0gPSB7
CiAgICAgICAgIHggPSBybmQoMjAwIC0gb2JqX3NpemUudyksCiAgICAgICAgIHkgPSBybmQoMjAw
IC0gb2JqX3NpemUuaCksCiAgICAgICAgIHcgPSBvYmpfc2l6ZS53LAogICAgICAgICBoID0gb2Jq
X3NpemUuaCwKICAgICAgICAgaWQgPSBpCiAgICAgIH0KICAgZW5kCiAgIHJldHVybiBvYmplY3Rz
CmVuZAoKZnVuY3Rpb24gY291bnRfY2VsbHNfYW5kX29iamVjdHMobG9jKQogICBsb2NhbCBjZWxs
X2NvdW50ID0gMAogICBsb2NhbCB0b3RhbF9vYmplY3RzID0gMAoKICAgLS0gQWNjZXNzIGludGVy
bmFsIHN0cnVjdHVyZSBzYWZlbHkKICAgaWYgbG9jLl9yb3dzIHRoZW4KICAgICAgZm9yIGN5LCBy
b3cgaW4gcGFpcnMobG9jLl9yb3dzKSBkbwogICAgICAgICBmb3IgY3gsIGNlbGwgaW4gcGFpcnMo
cm93KSBkbwogICAgICAgICAgICBjZWxsX2NvdW50ICs9IDEKICAgICAgICAgICAgbG9jYWwgb2Jq
ZWN0c19pbl9jZWxsID0gMAogICAgICAgICAgICBmb3Igb2JqIGluIHBhaXJzKGNlbGwpIGRvCiAg
ICAgICAgICAgICAgIG9iamVjdHNfaW5fY2VsbCArPSAxCiAgICAgICAgICAgIGVuZAogICAgICAg
ICAgICB0b3RhbF9vYmplY3RzICs9IG9iamVjdHNfaW5fY2VsbAogICAgICAgICBlbmQKICAgICAg
ZW5kCiAgIGVuZAoKICAgcmV0dXJuIGNlbGxfY291bnQsIHRvdGFsX29iamVjdHMKZW5kCgpmdW5j
dGlvbiBtZWFzdXJlX3F1ZXJ5X3ByZWNpc2lvbihsb2MsIG9iamVjdHMsIHF1ZXJ5X3NpemUpCiAg
IGxvY2FsIHRvdGFsX2NhbmRpZGF0ZXMgPSAwCiAgIGxvY2FsIHRvdGFsX2FjdHVhbCA9IDAKICAg
bG9jYWwgdGVzdHMgPSA1IC0tIFJlZHVjZWQgaXRlcmF0aW9ucyBmb3IgUGljb3Ryb24KCiAgIGZv
ciBpID0gMSwgdGVzdHMgZG8KICAgICAgbG9jYWwgcXggPSBybmQoMjAwIC0gcXVlcnlfc2l6ZSkK
ICAgICAgbG9jYWwgcXkgPSBybmQoMjAwIC0gcXVlcnlfc2l6ZSkKCiAgICAgIC0tIEdldCBjYW5k
aWRhdGVzIGZyb20gc3BhdGlhbCBoYXNoCiAgICAgIGxvY2FsIGNhbmRpZGF0ZXMgPSBsb2MucXVl
cnkocXgsIHF5LCBxdWVyeV9zaXplLCBxdWVyeV9zaXplKQogICAgICBsb2NhbCBjYW5kaWRhdGVf
Y291bnQgPSAwCiAgICAgIGZvciBvYmogaW4gcGFpcnMoY2FuZGlkYXRlcykgZG8KICAgICAgICAg
Y2FuZGlkYXRlX2NvdW50ICs9IDEKICAgICAgZW5kCiAgICAgIHRvdGFsX2NhbmRpZGF0ZXMgKz0g
Y2FuZGlkYXRlX2NvdW50CgogICAgICAtLSBDb3VudCBhY3R1YWwgaW50ZXJzZWN0aW9ucwogICAg
ICBsb2NhbCBhY3R1YWxfaGl0cyA9IDAKICAgICAgZm9yIG9iaiBpbiBwYWlycyhjYW5kaWRhdGVz
KSBkbwogICAgICAgICBpZiBvYmoueCArIG9iai53ID49IHF4IGFuZCBvYmoueCA8PSBxeCArIHF1
ZXJ5X3NpemUgYW5kCiAgICAgICAgICAgIG9iai55ICsgb2JqLmggPj0gcXkgYW5kIG9iai55IDw9
IHF5ICsgcXVlcnlfc2l6ZSB0aGVuCiAgICAgICAgICAgIGFjdHVhbF9oaXRzICs9IDEKICAgICAg
ICAgZW5kCiAgICAgIGVuZAogICAgICB0b3RhbF9hY3R1YWwgKz0gYWN0dWFsX2hpdHMKICAgZW5k
CgogICBsb2NhbCBhdmdfY2FuZGlkYXRlcyA9IHRvdGFsX2NhbmRpZGF0ZXMgLyB0ZXN0cwogICBs
b2NhbCBhdmdfYWN0dWFsID0gdG90YWxfYWN0dWFsIC8gdGVzdHMKICAgbG9jYWwgcHJlY2lzaW9u
ID0gYXZnX2NhbmRpZGF0ZXMgPiAwIGFuZCAoYXZnX2FjdHVhbCAvIGF2Z19jYW5kaWRhdGVzKSAq
IDEwMCBvciAwCgogICByZXR1cm4gYXZnX2NhbmRpZGF0ZXMsIGF2Z19hY3R1YWwsIHByZWNpc2lv
bgplbmQKCmZ1bmN0aW9uIHJ1bl9jb21wYWN0X2JlbmNobWFyaygpCiAgIHByaW50KCI9PT0gTE9D
VVNUUk9OIEJFTkNITUFSSyA9PT0iKQogICBwcmludCgiVGVzdGluZyBncmlkIHZzIG9iamVjdCBz
aXplIHRyYWRlLW9mZnMiKQogICBwcmludCgpCgogICBmb3IgXywgb2JqX3NpemUgaW4gcGFpcnMo
T0JKRUNUX1NJWkVTKSBkbwogICAgICBwcmludCgiT0JKRUNUIFNJWkU6ICIuLm9ial9zaXplLm5h
bWUuLiIgKCIuLm9ial9zaXplLncuLiJ4Ii4ub2JqX3NpemUuaC4uIikiKQogICAgICBwcmludCgi
R3JpZCB8IENlbGxzIHwgT2JqL0NlbGwgfCBQcmVjaXNpb24gfCBSZWNvbW1lbmRhdGlvbiIpCiAg
ICAgIHByaW50KCItLS0tLXwtLS0tLS0tfC0tLS0tLS0tLS18LS0tLS0tLS0tLS18LS0tLS0tLS0t
LS0tLS0tIikKCiAgICAgIGxvY2FsIG9iamVjdHMgPSBjcmVhdGVfdGVzdF9vYmplY3RzKE9CSkVD
VF9DT1VOVCwgb2JqX3NpemUpCgogICAgICBmb3IgXywgZ3JpZF9zaXplIGluIHBhaXJzKEdSSURf
U0laRVMpIGRvCiAgICAgICAgIGxvY2FsIGxvYyA9IGxvY3VzdHJvbihncmlkX3NpemUpCgogICAg
ICAgICAtLSBBZGQgYWxsIG9iamVjdHMKICAgICAgICAgZm9yIF8sIG9iaiBpbiBwYWlycyhvYmpl
Y3RzKSBkbwogICAgICAgICAgICBsb2MuYWRkKG9iaiwgb2JqLngsIG9iai55LCBvYmoudywgb2Jq
LmgpCiAgICAgICAgIGVuZAoKICAgICAgICAgLS0gTWVhc3VyZSBtZW1vcnkgZWZmaWNpZW5jeQog
ICAgICAgICBsb2NhbCBjZWxscywgdG90YWxfb2JqcyA9IGNvdW50X2NlbGxzX2FuZF9vYmplY3Rz
KGxvYykKICAgICAgICAgbG9jYWwgb2JqX3Blcl9jZWxsID0gY2VsbHMgPiAwIGFuZCB0b3RhbF9v
YmpzIC8gY2VsbHMgb3IgMAoKICAgICAgICAgLS0gTWVhc3VyZSBxdWVyeSBwcmVjaXNpb24KICAg
ICAgICAgbG9jYWwgYXZnX2NhbmRpZGF0ZXMsIGF2Z19hY3R1YWwsIHByZWNpc2lvbiA9IG1lYXN1
cmVfcXVlcnlfcHJlY2lzaW9uKGxvYywgb2JqZWN0cywgUVVFUllfU0laRSkKCiAgICAgICAgIC0t
IERldGVybWluZSByZWNvbW1lbmRhdGlvbgogICAgICAgICBsb2NhbCByZWNvbW1lbmRhdGlvbiA9
ICIiCiAgICAgICAgIGlmIHByZWNpc2lvbiA_IDgwIHRoZW4KICAgICAgICAgICAgcmVjb21tZW5k
YXRpb24gPSAiRVhDRUxMRU5UIgogICAgICAgICBlbHNlaWYgcHJlY2lzaW9uID4gNjAgdGhlbgog
ICAgICAgICAgICByZWNvbW1lbmRhdGlvbiA9ICJHT09EIgogICAgICAgICBlbHNlaWYgcHJlY2lz
aW9uID4gNDAgdGhlbgogICAgICAgICAgICByZWNvbW1lbmRhdGlvbiA9ICJPSyIKICAgICAgICAg
ZWxzZQogICAgICAgICAgICByZWNvbW1lbmRhdGlvbiA9ICJQT09SIgogICAgICAgICBlbmQKCiAg
ICAgICAgIC0tIEFkZCBtZW1vcnkgZWZmaWNpZW5jeSBub3RlCiAgICAgICAgIGlmIGNlbGxzIDwg
MTAgdGhlbgogICAgICAgICAgICByZWNvbW1lbmRhdGlvbiA9IHJlY29tbWVuZGF0aW9uLi4iL01F
TSsiCiAgICAgICAgIGVsc2VpZiBjZWxscyA_IDMwIHRoZW4KICAgICAgICAgICAgcmVjb21tZW5k
YXRpb24gPSByZWNvbW1lbmRhdGlvbi4uIi9NRU0tIgogICAgICAgICBlbmQKCiAgICAgICAgIHBy
aW50KHN0cmluZy5mb3JtYXQoIiU0ZCB8ICU1ZCB8ICU4LjFmIHwgJTguMWYlJSB8ICVzIiwKICAg
ICAgICAgICAgZ3JpZF9zaXplLCBjZWxscywgb2JqX3Blcl9jZWxsLCBwcmVjaXNpb24sIHJlY29t
bWVuZGF0aW9uKSkKICAgICAgZW5kCiAgICAgIHByaW50KCkKICAgZW5kCgogICBwcmludCgiPT09
IEdVSURFTElORVMgPT09IikKICAgcHJpbnQoIkVYQ0VMTEVOVDogSGlnaCBwcmVjaXNpb24sIGdv
b2Qgc3BhdGlhbCBmaWx0ZXJpbmciKQogICBwcmludCgiTUVNKzogTWVtb3J5IGVmZmljaWVudCAo
ZmV3IGNlbGxzKSIpCiAgIHByaW50KCJNRU0tOiBNZW1vcnkgaGVhdnkgKG1hbnkgY2VsbHMpIikK
ICAgcHJpbnQoKQogICBwcmludCgiUlVMRSBPRiBUSFVNQjoiKQogICBwcmludCgiLSBHcmlkIOKJ
iCBvYmplY3Qgc2l6ZSA9IGJlc3QgcHJlY2lzaW9uIikKICAgcHJpbnQoIi0gR3JpZCA_IG9iamVj
dCBzaXplID0gZmV3ZXIgY2VsbHMsIG1vcmUgZmFsc2UgcG9zaXRpdmVzIikKICAgcHJpbnQoIi0g
Q2hvb3NlIGJhc2VkIG9uIHlvdXIgZ2FtZSdzIHF1ZXJ5IGZyZXF1ZW5jeSIpCmVuZAoKLS0gQXV0
by1ydW4gd2hlbiBpbmNsdWRlZApydW5fY29tcGFjdF9iZW5jaG1hcmsoKQoKcmV0dXJuIHsKICAg
cnVuX2NvbXBhY3RfYmVuY2htYXJrID0gcnVuX2NvbXBhY3RfYmVuY2htYXJrCn0K
:: export/
:: export/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTEwLTI1IDIwOjQ1OjExIixtb2RpZmllZD0iMjAyNS0x
MC0yNSAyMTowNTo0NSJdXQ==
:: export/locustron.lua
--- @diagnostic disable:unknown-symbol, action-after-return, exp-in-action, miss-symbol
-- Picotron Userdata-Optimized Spatial Hash
-- Uses Picotron userdata for efficient bounding box storage

local locus_optimized = function(size)
   size = size or 32
   local rows, pool = {}, {}

   -- Object ID System for userdata indexing
   local next_obj_id = 1
   local obj_to_id = {}
   local id_to_obj = {}

   local function get_obj_id(obj)
      local id = obj_to_id[obj]
      if not id then
         id = next_obj_id
         next_obj_id = next_obj_id + 1
         obj_to_id[obj] = id
         id_to_obj[id] = obj
      end
      return id
   end

   -- Userdata Bounding Box Storage
   local MAX_OBJECTS = 10000
   local bbox_count = 0
   local bbox_data = userdata("f32", MAX_OBJECTS * 4)
   local bbox_map = {} -- obj_id -> bbox_index mapping

   local function frompool()
      local tbl = next(pool)
      if tbl then
         pool[tbl] = nil
         return tbl
      end
      return {}
   end

   local function box2grid(x, y, w, h)
      local l = math.floor(x / size) + 1
      local t = math.floor(y / size) + 1
      local r = math.floor((x + w) / size) + 1
      local b = math.floor((y + h) / size) + 1
      return l, t, r, b
   end

   -- Optimized bounding box management with userdata
   local function store_bbox(obj, x, y, w, h)
      local obj_id = get_obj_id(obj)
      local index = bbox_map[obj_id]
      if not index then
         index = bbox_count
         bbox_count = bbox_count + 1
         bbox_map[obj_id] = index
      end

      local base = index * 4
      bbox_data[base] = x
      bbox_data[base + 1] = y
      bbox_data[base + 2] = w
      bbox_data[base + 3] = h
   end

   local function get_bbox(obj)
      local obj_id = get_obj_id(obj)
      local index = bbox_map[obj_id]
      if not index then return nil end
      local base = index * 4
      return bbox_data[base], bbox_data[base + 1],
         bbox_data[base + 2], bbox_data[base + 3]
   end

   local function remove_bbox(obj)
      local obj_id = obj_to_id[obj]
      if not obj_id then return end

      bbox_map[obj_id] = nil
      obj_to_id[obj] = nil
      id_to_obj[obj_id] = nil
   end

   -- Specialized functions maintain same logic but use optimized storage
   local function add_to_cells(obj, l, t, r, b)
      local obj_id = get_obj_id(obj)
      local row, cell
      for cy = t, b do
         if not rows[cy] then
            rows[cy] = frompool()
         end
         row = rows[cy]
         for cx = l, r do
            if not row[cx] then
               row[cx] = frompool()
            end
            row[cx][obj_id] = true -- Use object ID instead of object reference
         end
      end
   end

   local function del_from_cells(obj, l, t, r, b)
      local obj_id = obj_to_id[obj]
      if not obj_id then return end

      local row, cell
      for cy = t, b do
         row = rows[cy]
         if row then
            for cx = l, r do
               cell = row[cx]
               if cell then
                  cell[obj_id] = nil
               end
            end
         end
      end
   end

   local function free_empty_cells(l, t, r, b)
      local row, cell
      for cy = t, b do
         row = rows[cy]
         if row then
            for cx = l, r do
               cell = row[cx]
               if cell and not next(cell) then
                  row[cx], pool[cell] = nil, true
               end
            end
            if not next(row) then
               rows[cy], pool[row] = nil, true
            end
         end
      end
   end

   local function query_cells(result, l, t, r, b, filter)
      local row, cell
      for cy = t, b do
         row = rows[cy]
         if row then
            for cx = l, r do
               cell = row[cx]
               if cell then
                  for obj_id in pairs(cell) do
                     local obj = id_to_obj[obj_id]
                     if obj and not result[obj] then
                        if not filter or filter(obj) then
                           result[obj] = true
                        end
                     end
                  end
               end
            end
         end
      end
   end

   return {
      _bbox_data = bbox_data,
      _obj_count = function() return bbox_count end,
      _box2grid = box2grid,
      _pool = pool,
      _rows = rows,
      _size = size,

      add = function(obj, x, y, w, h)
         store_bbox(obj, x, y, w, h)
         add_to_cells(obj, box2grid(x, y, w, h))
         return obj
      end,

      del = function(obj)
         local x, y, w, h = get_bbox(obj)
         if not x then error("unknown object") end

         local l, t, r, b = box2grid(x, y, w, h)
         del_from_cells(obj, l, t, r, b)
         free_empty_cells(l, t, r, b)
         remove_bbox(obj)
         return obj
      end,

      update = function(obj, x, y, w, h)
         local old_x, old_y, old_w, old_h = get_bbox(obj)
         if not old_x then error("unknown object") end

         local l0, t0, r0, b0 = box2grid(old_x, old_y, old_w, old_h)
         local l1, t1, r1, b1 = box2grid(x, y, w, h)

         if l0 ~= l1 or t0 ~= t1 or r0 ~= r1 or b0 ~= b1 then
            del_from_cells(obj, l0, t0, r0, b0)
            add_to_cells(obj, l1, t1, r1, b1)
            free_empty_cells(l0, t0, r0, b0)
         end

         store_bbox(obj, x, y, w, h)
         return obj
      end,

      query = function(x, y, w, h, filter)
         local res = frompool()
         local l, t, r, b = box2grid(x, y, w, h)
         query_cells(res, l, t, r, b, filter)
         return res
      end,

      -- Debug information
      get_bbox = get_bbox,
      get_obj_id = get_obj_id
   }
end

return locus_optimized

:: export/require.lua
--[[pod_format="raw",created="2025-10-25 11:53:08",modified="2025-10-25 11:53:08",revision=0]]
function require(name)
	if _modules == nil then
		_modules = {}
	end

	local already_imported = _modules[name]
	if already_imported ~= nil then
		return already_imported
	end

	local filename = fullpath(name..".lua")
	local src = fetch(filename)

	if (type(src) ~= "string") then
		notify("could not include "..filename)
		stop()
		return
	end

	-- https://www.lua.org/manual/5.4/manual.html#pdf-load
	-- chunk name (for error reporting), mode ("t" for text only -- no binary chunk loading), _ENV upvalue
	-- @ is a special character that tells debugger the string is a filename
	local func, err = load(src, "@"..filename, "t", _ENV)
	-- syntax error while loading
	if (not func) then
		-- printh("** syntax error in "..filename..": "..tostr(err))
		-- notify("syntax error in "..filename.."\n"..tostr(err))
		send_message(3, {event = "report_error", content = "*syntax error"})
		send_message(3, {event = "report_error", content = tostr(err)})

		stop()
		return
	end

	local module = func()
	_modules[name] = module

	return module
end

:: gfx/
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTEwLTEyIDE0OjQ5OjMwIixtb2RpZmllZD0iMjAyNS0x
MC0yNSAyMTowNTo0NSJdXQ==
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
MS0xNyAxMDozNzo0NCIscmV2aXNpb249Ml1dbHo0AH4AAAASMQAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMt5PTAsem9vbT04fSw_AB-wMQD-----
-----------------------------------------------------------XUG09OH19
:: label.qoi
b64$cW9pZgAAAeAAAAEOBAH9-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39
-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f3i-h0rU9D_AAAA
-f39-f39-dooNc4oNf39-f39-f3aKDXOKDX9-f39-f392ig1zig1-f39-f39-dooNc4oNf39-f39
-f3aKDXOKDX9_f4A5DY1wyPANcEjwDXAIzXAIzXAI8A1wCPDNSPBNcEjwDXAIzXAIzXFI8A1wCPB
NcEjwDXAI8M1I8E1wCPANcAjNccjNcAjNcAjwDXBI8A1wCM1wCM1-f396yg1zig1-fkjNcIjNcAj
NSM1wCM1IzXAIzUjNcAjNcEjNcEjNcAjNSM1wCM1I8A1IzXEIzXAIzUjNcAjNSM1wCM1wSM1wiM1
wCM1wCM1IzXHIzXAIzUjNcAjNSM1wCM1IzXAIzX9-f3rKDXOKDX9_SM1wiM1wCM1IzXCIzXAIzUj
NcQjNcEjNcAjNSM1wCM1IzUjwDXEIzXCIzXAIzUjNcAjNcEjNcIjNcAjNcAjNSM1xyM1wCM1IzXA
IzUjNcIjNcAjNf39-esoNc4oNf35IzXCIzXAIzUjNcIjNcAjNcAjwDXCIzXBI8E1wCM1wCM1IzXA
IzXFI8A1wCPBNcAjwjXBIzXCIzXAI8I1IzXHI8I1I8I1wCPANcAjwjX9-f3rKDXOKDX9_SM1wiM1
wCM1IzXCIzXAIzXCIzXBIzXBIzXAIzUjNcAjNSM1wCM1xyM1IzXCIzXAIzXBIzXCIzXAIzXAIzUj
NccjNcAjNSM1wCM1wiM1IzXAIzX9-f3rKDXOKDX9_SM1wiM1wCM1IzXAIzUjNcAjNSM1wCM1wSM1
wSM1wCM1IzXAIzUjNcAjNcQjNcAjNSM1wiM1wCM1wSM1wiM1wCM1wCM1IzXHIzXAIzUjNcAjNSM1
wCM1IzXAIzX9-f3rKDXOKDX9_SPCNcAjwDXBI8A1wSPBNcAjwDXCIzXBIzXAIzXAI8A1wCM1wCM1
xSPANcAjNcIjNcAjNcEjNcEjwTUjNcAjNSPCNcQjNcAjNSM1wCM1wCPANcAjNcAjNf39-esoNc4o
Nf39-f39-f3aKDXOKDX9-f39-f392ig1zig1-f39-f39-dooNc4oNf39-f39-f3aKDXOKDX9-f39
-f392ijQNf39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-f39-e4o1jX9-f39-CjX
Nf35KDXUKDX9-f39-Cg11Sg1-fkoNdQoNf39-f38KDXVKDX9_Sg11Cg1-f39-fwoNdUoNdwoyzX9
zig11Cg1-f39-fwoNdUoNc4o1TXBKDX9zig11Cg1-f39-fwoNdUoNc4oNcMoNcUoNcUoNcEoNd8o
yjXfKDXUKDX9-f396CjaNc4oNc4oNcMoNcUoNcUoNcEoNd8oNcgoNd8oNdQoNd7_--HowDXAPzXF
PzXKPzXMPzXKP8A14D81wT-ANcE-wDX9-eAoNdEoNcQoNc4oNc4oNcMoNcUoNcUoNcEoNd8oNcgo
Nd8oNdQoNd0-NcA-NT810j812j813z-ANcA-NcA-NT81wD81-doo0DXvKDXRKDXEKDXOKDXOKDXD
KDXFKDXFKDXBKDXfKDXIKDXfKDXUKDXdPzXAPzU-wTXCP8A1wD-ANcE-wTU-wjXAP8E1xD-ANcA-
wTXGPzXBP8A1wT-BNT81wD81wD-BNcs-NcA-NT-ANT81P8A1-esoNe8oNdEoNcQoNc4oNc4oNcMo
NcUoNcUoNcEoNd8oNcgoNd8oNdQoNd0-NcA-NT81wD81wj81PzXAPzU-NcM-NcE-Ncg-NcA-NcA-
NcU-NcA-NcA-NT81wj81wD81PzXDPzXIPzXAP8A1PzU-wDU-Nf3rKDXvKDXRKDXEKDUoyTXCKDXO
KDXAKNs11CjUNdsoNdQoNd0-NcA-NT81wD81wj81P8I1PzXDPzXCP8A1xj81wD81wD81xT81wD81
wD81PzXCPzXAPzXAP8A1zD81wD81wD81PzXAPzX96yg1yyjcNcQoNdEoNcQoNSg1xyg1wig1zig1
wCg1wCg1xSg1xSg1wSg1wig11Cg1wyg1yCg1wSg12yg11Cg13T81wD81PzXAPzXCPzU-NcI-NcM-
NcQ-NcU-NcA-NcA-NcU-NcA-NcA-NT81wj81wD81wj81wD81yD81wD81wD81PzXAPzX96yg1yyg1
2ig1xCg10Sg1xCg1KDXHKDXCKDXOKDXAKDXAKDXFKDXFKDXBKDXCKDXUKDXDKDXIKDXBKDXbKDXU
KDXeP8A1wD-BNcA-NcA-NcA-wTXAP8E1wT-ANT-BNcU-wTU-NcA-NcU-wDXAP8A1wT-BNcA-wTU-
wTXLP8E1wD-ANcE-wDX97Cg1yyg12ig1xCg10Sg1xCg1KDXHKDXCKDXOKDXAKDXAKDXFKDXFKDXB
KDXCKDXUKDXDKDXIKDXBKDXbKDXUKDXoP8A1-f39yCg1yyg12ig1xCg10Sg1xCg1KDXHKDXCKDXO
KDXAKDXAKDXFKDXFKDXBKDXCKDXUKDXDKDXIKDXBKDXbKDXUKDX9-f30KDXLKDXaKDXEKDXRKDXE
KDUoNccoNcIoNc4oNcAoNcAoNcUoyzXCKDXUKDXDKDXIKDXBKDXbKDXUKDX9-f30KDXLKDXaKDXE
KDXRKDXEKDUoNccoNcIoNc4oNcAoNcAoNcUoNcUoNcYoNdQoNcMoyjXBKDXbKDXUKDX9-f30KDXL
KDXaKDXEKDXRKDXEKDUoNccoNcIoNc4oNcAoNcAoNcUoNcUoNcYoNdQoNdIoNdsoNdQoNf39-fQo
NcsoNdooNcQoNdEoNcQoNSg1xyg1wig1zijNNcUoNcYoNdQoNdIoNdsoNdQoNd4-wDXAPzXFPzXK
PzXMPzXZP8A1yz-ANf37KDXLKDXaKDXEKDXRKDXEKDUoNccoNcIoNdEoNcAoNc0oNcYoNdQoNdIo
NdsoNdQoNd0-NcA-NT810j816T81yj81wD81-fooNcsoNdooNcQoNdEoNcQoNSjJNcIoNc8o2jXA
KDXUKDXSKDXbKDXUKDXdPzXAPzU-wTXCP8A1wD-ANcE-wTU-wjXAP8E1xD-ANcA-wTXFP8E1wT-A
NcE-wDXBPzXKPzU-wDX9_ig1yyg12ig1xCg10Sg1xCg1zig1zyg1KDXWKDXAKDXUKDXSKDXbKDXU
KDXdPzXAPzU-NcA-NcI-NT81wD81PzXDPzXBPzXIPzXAPzXAPzXEPzXAPzU-NcA-NT81wD81wD81
wT81xj-ANT81-fooNcsoNdooNcQoNdEoNcQoNc4oNc8oNSg11ig1wCg11Cg10ig12yjWNd0-NcA-
NT81wD81wj81P8I1PzXDPzXCP8A1xj81wD81wD81xD81wD81PzXAPzU-NcA-NcA-Nco-NcA-Nf36
KDXLKDXaKDXEKDXRKDXEKDXOKDXEKNY1zCg1wCg11Cg10ig1-dQ-NcA-NT81wD81wj81PzXCPzXD
PzXEPzXFPzXAPzXAPzXEP8E1wD81wD81PzXAPzXAPzXBPzXGPzXAPzX9_ig1yyg12ig1xCg10SjX
NcQoNcgoNSg1xyg1zCg1wCg11Cg10ig1-dU-wDXAP8E1wD81wD81wD-BNcA-wTXBP8A1P8E1xT-B
NT81wD81xD81wz-ANcE-wDXBP8A1yj-ANf37KDXLKDXaKDXEKDXYKDXVKDXIKDUoNccoNcwoNcAo
NdQoNdIoNf3fP8A15z81-f3cKDXLKDXaKDXEKDXYKDXVKDXIKDUoNccoNcwoNcAoNdQoNdIoNf39
-f3rKDXLKDXaKDXEKDXYKDXVKDXIKDUoNccoNcwoNcAoNdQoNdIoNf39-f3rKDXLKDXaKDXEKDXY
KDXVKDXIKDUoNccoNcwoNcAoNdQoNdIoNf39-f3aKMU1yCg1yyg12ig1xCg12Cg11Sg1yCg1KDXH
KDXMKDXAKDXUKDXSKDX9-f394Cg1yCg1yyg12ig1xCg12Cg11Sg1yCg1KDXHKDXMKDXAKDXUKDXS
KDX9-f394Cg1yCg1yyg12ig1xCg12Cg11Sg1yCg1KDXHKDXMKDXAKDXUKNQ1-f39-eAoNcgoNcso
NdooNcQoNdgoNdUoNcgoNSg1xyg1zCg1wCg1-f39-f3OKDXIKDXLKDXaKDXCKNw11Sg1yCg1KDXH
KDXMKDXAKDXTKNw1-f39-dkoNcgoNcsoNdooNcIoNcYoNekoNcgoNSg1xyg1zCg1wCg10yg12ig1
-f39-dMo0DXLKDXaKDXCKDXGKDXpKDXIKDUoNccoNcwoNcAoNdMoNdooNf39-f3ZKDXWKDXaKDXC
KDXGKDXpKDXIKDUoNccoNcwoNcAoNdMoNcAozjXIKDX9-f392Sg11ig12ig1wig1xig16Sg1yCg1
KDXHKDXMKDXAKDXTKDXAKDXMKDXIKDX9-f392Sg11ig12ig1wig1xig16Sg1yCg1KNs10yg1wCg1
zCg1yCg1-f39-dkoNdYoNdooNcIoNcYoNekoNcgoNckoNcwoNdYoNcAoNcwoNcgoNf39-f3ZKDXW
KNw1wig1xig16Sg1yCg1ySg1zCg11ig1wCg1zCg1yCg1-f39-dkoNeoo3TXiKDXIKDXJKDXMKDXW
KDXAKDXMKDXIKDXGKNs1-f398ig16ig1yyjINcQoNeIoNcgoNckoNcwoNdYoNcAoNcwoNcgoNcYo
NdkoNef_wsPHwTXFOzXDOzXKOzXVO8A1wTvANf39yyg16ig12yg10SjZNSg1ySg1zCg11ig1wCg1
yijKNSg1xig12Sg15js1zjs14Ts1wDs1OzXAOzX9-cooNeooNdsoNdEoNc4oNcYoNSg1ySg1zCg1
1ig1wCg1yig1KDXGKDUoNcYoNdkoNeY7NcI7NTvANTvANcE7wTXFO8E1O8A1wDvCNcA7wDXNOzXC
OzU7wTXAOzXAOzX9-cAoNeooNdsoNdEoNc4oNcYoNSg1ySg1zCg11ig1wCg1yig1KDXGKDUoNcYo
NdkoNeY7NTvANTvANcI7NcA7NcA7NcQ7NcM7NcM7NTs1wDs1wDs1xzvANcI7NcA7NcA7NTs1wDs1
-f3AKDXqKDXbKDXRKDXOKNY1zCg11ig1wCg1yig1KDXGKDUoNcYoNdkoNeY7NcA7NTs1wzs1wDs1
wDs1xTvANcE7NcE7wDXAO8I1zDs1wDs1wTs1wDs1wDvANf35KM814Cg1wP4prf-X-oN2nMAK-v-s
J9H_-wBN-v_jAMcQwCHIDcMfP8wQwD-KH9AQwB-CPzXAKDXKKDUoNcYoNSg1xig12Sg15js1wDs1
OzXDOzXAOzXAOzXHOzXAOzXAOzXCOzXDOzXGOzXAOzU7NcI7wTXAOzXAOzX9-cAoNccoNeAoNcAK
1xDACjXRDSHHEMAhyA3DNc0QwDXcEMA1wj81wCg1yig1KDXGKDUoNcYoNdkoNec7wTU7NcI7wTXA
O8E1xDvBNcA7wTU7wjXAO8E1yjvANcA7wjU7NcI7NcA7Nf39wCg1xyg14Cg1wArXEMAKNdENIccQ
wCHIDcM1zRDANdwQwDXCPzXAKDXKKDUoNcYoNSg1xig12Sg1-ec7Nf39yCg1xyg14Cg1wArXEMAK
NdENIccQwCHIDcM1zRDANdwQwDXCPzXAKDXKKDUoNcYoNSg1xig12Sg1-f398ig1xyg14Cg1wArX
EMAKNdENIccQwCHIDcM1zRDANdwQwDXCPzXAKM41xig1KNc1yig1-f398ig1xyg14Cg1wB-XEMAK
NdENIccQwCHIDcM1zRDANcE-2DUQwDXCPzXJKNY1wCg1zCg1yig1-f398ig1xyg14Cg1wB-XEMAK
NdENIccQwCHIDcM1zRDANcE-2DUQwDXCPzXJKDXBKDXIKDUowDXCKDXAKDXMKDXKKDX9-f3yKDXH
KDXgKDXAH9cQwAo10Q0hxxDAIcgNwzXNEMA1wT-YNRDANcI-NckoNcEoyjUowDXCKDXAKDXMKDXK
KDXnO8A1wDs1xTs1yjs1zDs12zs1zDs1wTvANeA7wDXBO8A1-cEoNccoNeAoNcAf1xDACjXRDSHH
EMAhyA3DNc0QwDXBP9g1EMA1wj81ySg1zijANcIoNcAoNcwoNcooNeY7NcA7NTs10js1_DvANcA7
NcA7Nd47NcA7NTs1wDs1-cAoNccoNeAoNcAf1xDACsw1xA0hxxDAIcgNwzXNEMA1wT-AH9U-NRDA
NcI-NckoNc4owDXCKDXAKDXMKDXKKDXmOzXAOzU7wTXCO8A1wDvANcE7wTU7wjXFO8E1O8A1wDvC
NcA7wDXKO8A1OzXAO8A1wDvBNcc7NcA7NTvANck7wDU7NcE7wDXAOzXAOzXHOzXCOzX9wCg1xyg1
4Cg1wB-XEMAKzDXEDSHHEMAhyA3DNc0QwDXBP8Af1T81EMA1wj81ySg1zijANcIoNcAoNcwoNcoo
NeY7NcA7NTs1wDs1wjs1OzXAOzU7NcM7NcY7NcM7NcM7NTs1wDs1wDs1xjs1OzU7NcA7NcA7NcA7
NcY7NcA7wDU7Nck7NTs1OzXCOzU7NcA7NcU7wDXCOzX5KMU1xyg14Cg1wB-XEMAKzDXEDSHHEMAh
yA3DNc0QwDXBP8Af1T81EMA1wj81ySg1zijANcIoNcAoNcwoNcooNeY7NcA7NTs1wDs1wjs1O8I1
OzXDOzXHO8A1wTs1wTvANcA7wjXJOzU7NTs1wDs1wDs1wDs1xjs1wDs1wDs1yTs1OzU7NcA7wTXA
O8A1yDs1wDs1-cwoNeAoNcAf1xDACsw1xA0hxxDAIcgNwzXNEMA1wT-AH9U-NRDANcI-NckoNc4o
wDXCKDXAKDXMKDXKKDXmOzXAOzU7NcA7NcI7NTs1wjs1wzs1yTs1wDs1wDs1wjs1wzs1xjs1wTs1
wDs1wDs1wDs1xjs1wDs1wDs1yTs1wTs1OzXAOzU7NcA7NcQ7NcA7NTs1-c0oNeAoNcAf1xDACsw1
xA0hxxDAIcgNwzXNEMA1wT-AH9U-NRDANcI-NckoNc4owDXCKDXAKDXMKDXKKDXnO8A1wDvBNcA7
NcA7NcA7wTXAO8E1wTvANcQ7wTXAO8E1O8I1wDvBNck7NcE7NTvBNTs1wDs1xTvBNcA7wDXCOzXF
OzXBOzXAO8E1OzXAOzXFO8A1wDvCNf3KKDXgKDXAH9cQwArMNcQNIccQwCHIDcM1zRDANcE-wB-V
PzUQwDXCPzXJKDXOKMA1wig1wCg1zCg1yig18TvANf3SOzX98Cg14Cg1wB-XEMAKzDXEDSHHEMAh
yA3DNc0QwDXBP8Af1T81EMA1wj8o3DXCKDXAKDXMKDXKKDX9-f38KDXgKDXAH9cQwArMNcQNIccQ
wCHIDcM1zRDANcE-wB-VPzUQwDXCHzXJKDXPKDXCKDXAKDXMKDXKKDX9-f38KDXgKDXAH9cQwArM
NcQNIccQwCHIDcM1zRDANcE-wB-VPzUQwDXCHzXJKDXPKDXCKDXAKDXMKDXKKDX9-f38KDXgKDXA
H9cQwArMNcQNIccQwCHIDcM1zRDANcE-wB-VPzUQwDXCHzXJKDXPKDXCKDXAKDXMKDXKKDX9-f3s
KM814Cg1wB-XEMAKzDXEDSHHEMAhyA3DNc0QwDXBP8Af1T81EMA1wh81ySg1zyg1wig1wCg1zCg1
yig15jvBNcE7Nco7wDXuO8A1wDvCNcA7wDXGO8A1wDvCNcA7wDX9-dAoNcAf1xDACsw1xA0hxxDA
IcgNwzXNEMA1wT-AH9U-wBDAP8IfNckoNc8oNcIoNcAoNcwoNcooNeY7NcA7Nc47Ne07NcA7NTs1
wjs1xzs1wDs1OzXCOzX9-dIoNcAf1xDACsw1xA3IEMANzTXNEMA1wT-AH9U-wBDAP8IfNckoNc8o
NcIoNcAoNcwoNcooNeY7NcA7NTvANcE7wTU7wTXBOzXBO8A1wDs1wDs1xTvANcA7NTvANcA7wDXB
O8A1zTs1OzXCOzXCOzXAOzXCOzU7NcI7Nf390ig1wBD9-cI1ySg1zyg1wig1wCjbNeY7NcA7NcA7
NcA7NcI7NcA7NcA7NcM7NTs1wDs1xzs1O8A1wTs1wDs1wjs1wDs1yDs1wDvBNcA7wTXAOzXAOzXB
OzXAO8E1wDvBNf390Cg1wBD9-cI1ySg1zyg1wig1yCg1xCg1xSg16zs1wDs1wDs1wTvANcA7NcA7
NcA7NcE7wTU7NcA7NcU7wTU7NcI7wjXAO8E1yjs1xDs1OzXAOzXAO8A1wTs1xDs1OzXAOzX9-c8o
wR-XEMAKzDXOEMA13BDANcE-wB-VP8AQwD-CHzXJKDXPKDXCKDXIKDXEKDXFKDXrOzXAOzXAOzXD
OzU7wTXBOzXAOzXAOzXAO8E1xDs1wDs1OzXCOzXCOzXAOzXAOzXGOzXFOzU7NcA7NTs1wDs1OzXF
OzU7NcA7Nf390h-XEMAKEMIKxzXOEMA1wBDANdgQwDUQwh-VP8AQwD8QwjXJKDXCKNo1KDXEKDXF
KDXrO8E1wDvBNTvBNcA7NcM7wDXAO8E1wjs1xTvBNTs1wzvBNcA7wTXJO8I1O8E1wTvANcA7NcA7
NTvCNTvBNcE7wDX9-dMf1xDANcIQNdcQwDUQNcAQNdcQwDXBPxAf1T-AEMA-whA1ySg1wig1yig1
wig1xig1KDXEKDXFKDX5OzXMO8A1-f392x-XEMA1whA11xDANcIQNdcQwDXBPxAf1T-AEMA-whA1
ySg1wig1yijWNcUoNf39-f3pH9cQwDXBEDXYEMA1wRA12BDANcEQPx-VP8AQwD-BEB81ySjWNcYo
NSg1zCg1-f39-ekf1xDANcAQNdkQwDXAEDXZEMA1wBA-wB-VP8AQwD-AED8fNc4oNdgoNSg1zCg1
-f39-ekf1xDANcAQNdkQwDUQNdoQwDXAED-AH9U-wBDAP8AQPx81zig12Cg1KDXMKDX9-f396R-X
EMA1wBA12RDANRDCNdcQwDXAEDXAH9U-wBDAP8AQPx81zig12Cg1KDXMKDXrOzXAOzXAOzXbOzXN
OzXBO8A1wTvANcc7NcE7wDXBO8A1-f3lHzXWEMA13BDANdwQwDXEP9YQwD-CHzXOKDXYKDUoNcwo
Nes7NcA7Nd47Ncw7wDXAOzXAOzU7NcA7NcU7wDXAOzXAOzU7NcA7Nf395B811hDANdwQwDXcEMA1
xD-WEMA-wh81zig12Cg1KDXMKDXrOzXAOzU7wDXBO8A1wDs1wTs1O8E1wTvANcA7NTvANTvCNcs7
NcM7NTs1wDs1OzXAOzXBOzXDOzU7NcA7Nf395B811hDANdwQwDXcEMA1xD-WEMA-wh81zig12Cg1
KDXMKDXrOzXAOzXAOzXAOzXAOzU7NcE7NTs1wDs1OzXAOzU7wDXCOzXCOzXIOzXCOzXBO8A1wDs1
wDs1wTs1wjs1wTvANf395R811hDANdwQwDXcEMA1xD-WEMA-wh81zig12Cg1KDXMKDXrOzXAOzXA
OzXAO8I1OzU7NTs1OzXAOzU7NcA7NTs1wzs1zTs1wTs1wTs1wDs1wDvANcI7NcE7NcE7NcA7Nf39
5B811hDANdwQwDXcEMA1xD-WEMA-wh81zig1wCjJNcsoNSg1zCg16zs1OzXBOzXAOzXCOzU7NTs1
O8E1wDs1wDs1OzXDOzXCOzXIOzXAOzXCOzXAOzU7NcA7NcE7NcA7NcI7NcA7Nf395B811hDANdwQ
wDXcEMA1xD-WEMA-wh81zig1wCg1xyg1yyg1KM416zvANcE7wTXAO8E1wDs1OzXAOzXDO8A1wDs1
xDvANco7wTU7wjXAO8A1wDs1wDs1wDvBNTvCNcA7wDX9-eUfNdYQwDXcEMA13BDANcQ-1hDAP8If
Nc4oNcAoNccoNcsoNf3SOzX9-f3lHzXWEMA13BDANdwQwDXEP9YQwD-CHzXOKDXAKDXHKDXLKDX9
-f39xCjSNeAfNdE7wxDAO8Yj1BDAI8M11xDANcQ-1hDAP8IfNc4oNcAoNccoNcsoNf39-f3XKDXg
HzXRO8MQwDvGI9QQwCPDNdcQwDXEP9YQwD-CHzXOKDXAKDXHKDXLKDX9-f391yg14B810TvDEMA7
xiPUEMAjwzXXEMA1xD-WEMA-wh81zig1wCg1xyg1yyg1-f39-dcoNeAfNdE7wxDAO8Yj1BDAI8M1
1xDANcQ-1hDAP8IfNc4oNcAoNccoNcsoNf39-f3XKDXgHzXRO8MQwDvGI9QQwCPDNdcQwDXEP9YQ
wD-CHzXOKDXAKDXHKDXLKDX9-f391yg14B810TvDEMA7xiPUEMAjwzXXEMA1xD-WEMA-wh81zig1
wCg1xyg1yyg1-f39-dcoNeAfNdE7wxDAO8Yj1BDAI8M11xDANcQ-1hDAP8IfNc4oNcAoyTXLKDX9
-f391yg14B810TvDEMA7xiPUEMAjwzXXEMA1xD-WEMA-wh81zig12Cg1-f39-dcoNeAfNdE7wxDA
O8Yj1BDAI8M11xDANcQ-1hDAP8IfNc4oNdgoNf39-f3XKDXgHzXRO8MQwDvGI9QQwCPDNdcQwDXE
P9YQwD-CHzXOKDXYKDX9-f391yg14B810TvDEMA7xiPUEMAjwzXXEMA1yP7-d6jRNRDANcENwCjY
Nc8oNf39-f3XKDXgHzXRO8MQwDvGI9QQwCPDNdcQwDXIHdE1EMA1wQ3ANc4oNcYoNcsozjX9-f39
zCg14B810TvDEMA7xiPUEMAjwzXXEMA1yB3QIcAQwCHBDcAo6jXIKDX9-f39zCg14B810TvDEMA7
xiPUEMAjwzXXEMA1yB3QI8AQwCPDKMQ1yig1xCg1yyg1zCg1-f39-cwoNeAQ-f3CNcMoNcooNcQo
NcsoNcwoNf39-f3MKDXgEP39wjXDKDXKKDXEKDXLKDXMKDXxI8E1wCPCNSPBNcAjwjXAI8A1wCPB
NcAjNcEjNcAjwDXAIzXAIzXAI8A1wCPCNf393ig14B811hDANcYj1BDAI8M11xDANcgd0CPAEMAj
wzXDKDXKKDXEKDXLKDXCKDXHKDXxIzXAIzUjNcIjNcAjNSM1wiM1wCM1IzXAIzUjwDUjwDUjNcAj
NSPANSM1IzXAIzUjNf394Sg14B811hDANcAQwDXCI9QQwCPBECM11xDANcAQwDXEHdAjwBDAIxDC
KNM1wig1yyg1wSg-KDXGKDXxIzXAIzUjNcIjNcAjNSM1wiM1wCM1IzXAIzUjNSM1IzUjNcAjNSM1
I8A1IzXCIzX9-eEoNeAfNdYQwDUQNcAQNcEj1BDAI8AQwCM11xDANRA1xh3QI8AQwCPCEDXDKDXK
KDUoNcIoNcsoNcEoP8AoNcUoNfEjwTXAI8E1wCPBNcAjwTXAIzXAIzUjwTXAIzUjNSM1I8I1IzXA
IzUjNcIjwTX9-d8oNeAfNcE-yzXGEMA1EDXAEDXBI9QQwCMQIxAjNdcQwDUQNcYd0CPAEMAjwhA1
wyg1yig1KDXCKDXLKDXBKD-BKDXEKDXxIzXCIzXCIzXAIzUjNcIjNcAjNSM1wCM1IzXBIzUjNcAj
NSM1wCM1IzXCIzX9-eEoNeAfNcE-yzXGEMA1wBDBNcEj1BDAIxAjECM11xDANRDBNcQd0CPAEMAj
wRAjNcMoNcooNSg1wig1yyg1wSg-wig1wyg18SM1wiM1wiM1wCM1IzXCIzXAIzUjNcAjNSM1wSM1
IzXAIzUjNcAjNSM1wCM1IzX9-eEoNeAfNcE-yzXGEMA1whA1wSPUEMAjEMI11xDANRA1wBA1wx3Q
I8AQwCPAECPANcMoNcooNSg1wig1yyg1wSg-wCjANcQoNfEjNcIjwjUjNcAjNSM1wyPANcAjNcAj
NSM1wSM1IzXAIzUjNcAjNcAjwDXAI8I1-f3eKDXgHzXBP8s1xhDANcIQNcEj1BDAI8EQIzXXEMA1
EDXAEDXDHdAjwBDAI8AQI8A1wyg1yig1KDXCKDXLKDXCKMA-KDXEKDX9-f39zCg14B81wT-LNcYQ
wDXAEMA1wiPUEMAjwRAjNdcQwDXAEMA1xB3QI8AQwCPAECPANcMoNcooNSg1wig1yyg1zCg1-f39
-cwoNeAfNcE-yzXGEMA1xiPUEMAjwzXXEMA1yB3QI8AQwCPDNcMoNcooNSg1wig1yyg1zCg1-f39
9yjSNeAfNcE-yzXGEMA1xiPUEMAjwzXXEMA12iPAEMAjwzXDKDXKKDUoNcIoNcsoNcwoNf39-f3v
HzXBP8s1xhDANcYj1BDAI8M11xDANdojwBDAI8M1wyg1yig1KDXCKDXLKM41-f39-e8fNcE-yzXG
EMA1xiPUEMAjwzXXEMA12iPAEMAjwyjENcooNSg1wig1-dE7wDXAO8E1wDs1wDs1yzs1-f393h81
wT-LNcYQwDXGIyHJI8gQwCPDNcUNyTXFEMA12iHAEMAhwQ3ANdAoNSg1wig1-dA7NcA7NTs1wDs1
OzXAOzXKO8A1-f393h81wT-LNcYQwDXHIck1yBDANcoNyTXFEMA12iHAEMAhwQ3ANdAoNSg1wig1
-dA7NcI7NcA7NTs1wDs1yzs1wDs1wDs1-f392B81wT-LNcYQwDXHIck1yBDAO8oNyTvDNcAQwDUN
2DUhwBDAIcENwDXQKDUoNcIoNf3QOzXCO8E1wDs1wDs1wDs1yDs1wjs1-f392R81wT-LNcQNwBDA
DcchyQ01xxDAO8oNyTvDNcAQwDUN2DUhwBDAIcENwDXQKDUoNcIoNf3QOzXCOzXCOzXAOzXLOzXB
OzX9-f3aHzXUDcAQwA3HIckNNccQwDvKDck7wzXAEMA1Ddg1IcAQwCHBDcA10Cg1KDXCKDXLKNg1
5zs1wDs1OzXCOzXAOzXAOzXIOzXAOzXAOzX9-f3YHzXUDcAQwA3HIckNNccQwDvKDck7wzXAEMA1
Ddg1IcAQwCHBDcA10Cg1KDXCKDXLKDXWKDXoO8A1wDs1wzvBNco7wTX9-f3dHzXUDcAQwA3HIckN
NccQwDvKDck7wzXAEMA1Dcgj0RDAIcAQwSjTNcIoNcsoNdYoNf39-f3lHzXQEMsNwiHJDTXHEMA7
yg3JO8M1wBDANQ3II9EQwCHAEME10CjBNcIoNcsoNdYoNf39-f3lHzXQEMsNwiHJDTXHEMA7yg3J
O8M1wBDANQ3II9EQwCHAEME10CjBNcIoNcsoNdYoNf39-f3lHzXQEMsNwiHFEN0NxjvDNcAQwDUN
yCPREMAhwBDBKNg1yyg11ig1-f39-eUfNdAQyw3CIcUQ3Q3GO8M1wBDANQ3II9EQwCHAEME10CjB
NdAoNdYoNf39-f3lHzXQEMsNyRDdO8s1wBDANQ3II9EQwCHAEMEo0zXQKDXWKDXnOzXBOzU7wjU7
NcE7Nco7wDXBO8A1wTvANcU7NcA7NTvBNf39-cMfNdAQyw3JEN07yzXAEMA1Dcgj0RDADcAQwTXR
KMA10Cg11ig15zvANTvANTs1wjvANTvANck7NcA7NTs1wDs1OzXAOzXEOzXAOzU7NcA7Nf39-cIf
NdAQyw3JEN07yzXAEMA1Dcgj0RDADcAQwTXRKMA10Cg11ig15zs1OzU7NTs1wjs1OzU7Nck7NcA7
NTs1wDs1OzXAOzXEOzU7NcA7NcA7Nf39-cIfNdAQyw3JEN07yzXAEMA1Dcgj0RDADcAQwTXRKMA1
0Cg11ig15zs1OzU7NTvBNcA7NTs1OzXAOzXHO8A1wTvANcE7wDXFO8A1wTvBNf39-cMfNc8hEMsN
yRDdO8s1wBDANQ3II9EQwA3AEMEo0zXQKDXWKDXnOzXBOzU7NcI7NcE7Nck7NcA7NTs1wDs1OzXA
OzXEOzU7NcA7NcA7Nf39-cIfNc8hEMsNyRDdO8s1wBDANQ3II9EQwDXAEME10Sg10Sg11ig15zs1
wTs1OzXCOzXBOzXAOzXGOzXAOzU7NcA7NTs1wDs1xDs1wDs1OzXAOzX9-f3CHzXPIRDLDckQ3TvL
NcAQwDUNyCPREMA1wBDBNdEoNdEoNdYoNec7NcE7NTvCNTs1wTs1yjvANcE7wDXBO8A1xTs1wDs1
O8E1-f39wxD9-cIoxTXKKDXRKDXWKDX9-f395RD9-cI1xCg1yig10Sg11ig1-f39-eUfNc8hww3A
EMANzhDdO8s1wBDANQ3II9EQwCPAEME1xCg1yig10Sg11ig1-f39-eUfNc8hww3AEMANwBDADcoQ
3TvLH8AQwB8Qwg3EI9EQwCMQwjXEKDXKKDXRKDXWKDX9-f395R81zyHDDcAQwA0QDcAQCskQ3TvL
H8AQwB8NwRANxCPREMAjwBDBNcQoNcooNdEoNdYoNf39-f3lHzXPIcMNwBDADRANwBAKyRDdO8sf
wBDAHw3BEA3EI9EQwCPAEME1xCg1yig10Sg11ig16DvANcY7NcI7NfA7NcE7wDX9-e8fNc8hww3A
EMANwBDADQrJEN07yx-AEMAfDcAQDcUj0RDAI8AQwTXEKDXKKDXRKDXWKDXnOzXAOzXFOzX0O8A1
wDs1wDs1-f3uHzXPIcMNwBDADRANwBAKyRDdO8sfwBDAHw0QDcYj0RDAI8AQwTXEKDXKKDXRKDXW
KDXnOzXAOzXAO8E1O8I1O8A1wDs1wDs1wDvANcU7NTvANcA7wDXAOzXBOzXAO8E1yzs1wzs1-f3u
HzXPIcMNwBDADRANwBAKyRDdO8sfwBDAHw0QDcYj0RDAI8AQwTXEKDXKKDXRKDXWKDXnO8I1OzXD
OzXCOzXAOzXAOzU7NcA7NcQ7wDXBOzXAOzU7NcE7NTs1wzs1yDs1wjs1-f3vHzXPIcMNwBDADcAQ
wA0KyRDdO8sfwBDAHw0QDdYjwRDAI8AQwTXEKDXKKDXRKDXWKDXnOzXAOzU7NcM7NcI7NcA7NcA7
NTvCNcQ7NcI7NcA7NTs1OzU7NcA7wDXMOzXBOzX9-fAfNc8hxRDAIcMKyRDdO8sfwBDAH9U1wSPC
EMAjwBDBKNI10Sg11ig15zs1wDs1OzXDOzXCOzXAOzU7NcA7Ncc7NcI7NcA7NTs1OzU7NcI7NcA7
Ncg7NcA7Nf398R81zyHFEMAhwwrJEN07yx-AEMAf1TXBI8IQwCPDNcQoNd4o2DXnOzXAOzXAO8E1
wTvANTvBNTvANcI7wTXEOzXDO8A1wTs1OzXAO8E1yzvBNTvCNf397h81zyHFEMAhwwrJEN07yx-A
EMAf1TXBI8IQwCPDNcQoNf39-f392yjEIcQ1yiHFEMAhwwrJENMNyjvJH8AQwB-VNcEjwhDAI8M1
xCg1-f39-f3bKDXDIcQ1yiHFEMAhwwrJENMNyjXGH8MQwB-VNcEjwhDAI8M1xCg1-f39-f3bKMQh
xBDLIcQQwCHDCskQ0w3KNcYfwxDAH9U1wSPCEMAjwzXEKDX9-f39-dsowDXCIcQQyyHEEMAhwwrJ
ENMNyjXGH8MQwB-VNcEjwhDAI8M1xCg12SjcNf39-f3gKMA1wiHEEMshxBDAIcMKyRDTDco1wCHJ
EMAhzB-HNcEjwhDAI8MoxTXZKDXaKDX9-f394CjANcIhxBDLIcQQwCHDCskQ0w3KCsAhyRDAIcwf
xzU7xBDAO8MowzXbKDXaKDX9-f394CjANcIhxBDLIcQQwCHDCskQ0w3KCsAhyRDAIcwfxzU7xBDA
O8M1wig12yg12ig1-f39-eAowDXCIcQQyyHEEMAhwwrJENMNygrAIckQwCHMH8c1O8QQwDvDNcIo
NdsoNdooNf39-f3gKMA1wiHEEMshxBDAIcMKyRDTDcoKwCHJEMAhzB-HNTvEEMA7wzXCKDXbKDXa
KDX9-f394CjANcIhxBDLIcQQwCHDCtcQwAoQwg3KCsAhyRDAIcwfxzU7xBDAO8M1wig12yg12ig1
-f39-eAowDXCIcQQyyHEEMAhwwrXEMAKEMINygrAIckQwCHMH8c1O8QQwDvDNcIoNdsoNdooNf39
-f3gKMQhxBDLIcQQwCHDCtcQwAoQwg3KCsAhyRDAIcwfxzU7xBDAO8M1wig12yg12ig1-f39-eEo
NcIQ0R3EEMAdIcIK1xDAChDHCschyRDAIcwfxzU7xBDAO8M1wig12yg12ig1-f39-eEoNcIQ0R3E
EMAdIcIK1xDAChDHCschyRDAIcwfxzU7xBDAO8M1wig12yg12ig1-f39-eEoNcIQ0R3EEMAdNcIK
1xDAChDHCschyRDAIcwfxz87xBDAO8MoNcEoNdsoNdooNf39-f3hKDXCENEdxBDAHTXCCtcQwAoQ
xwrHIckQwCHMH8c-O8QQwDvDKDXBKDXbKDXaKDX9-f394Sg1whDRHcQQwB01wgrXEMAKEMcKxyHJ
EMAhzB-HPzvEEMA7wyjENdooNdooNf39-f3hKDXCENEdxBDAHTXCCtcQwAoQxwrHIckQwCHMH8c-
O8QQwDvDKDXBKMg10ig12ig1-f39-eEoNcIQ0R3EEMAdNcIK1xDAChDHCschyRDAIcwfxz87xBDA
O8MoNcEowDXFKDXSKDXaKDX9-f394Sg1whD9-cIoNcEowDXFKDXSKDXaKDX9-f39yyjPNcMoNcIQ
-f3CKDXBKMA1xSg10ig1zCjaNf39-fwoNc0oNcMoNcIQ0R3EEMAdNcoQ2wrHIckQwCHMNcc-O8QQ
wDvDKDXBKMA1xSg10ig1zCg1yyg1yig1-f39-Cg1zSjJENEdxBDAHTXAEDXHENsKxyHJEMAhwBDA
Icg1xz87xBDAO8AQwDsoxDXFKDXSKDXMKDXLKDXKKDX9-f38KDXNKMA1wig1whDRHcQQwB01EMA1
xxDbNcchyRDAIRAhyjXHP8UQwD8QP8AQKDXBKMA1xSg10ig1wSjdNcUoNf39-fwoNc0owDXCKDXC
ENEdxBDAHRA1EDXHENs1xyHJEMAhECHKNcc-xRDAPxA-wBAoNcEowDXFKDXSKDXBKDXIKDXLKDXC
KDXFKDX9-f38KDXNKMA1wijDENEfwTXBEMA1EDUQNccQ2zXHIckQwCEQwSHINcc-xRDAP8AQwD8o
xTXEKDXSKDXBKDXIKDXLKDXCKDXFKDX9-f38KDXNKMA1xxDINR-JNcEQwDUQwjXGENs1xyHJEMAh
ECHAECHHNcMQwj-FEMA-ED-AECjMNdIoNcEoNcgoNcsoNcIoNcUoNf39-fwoNc0owDXHEMg1H8k1
wRDANcEQNccQ2zXHIckQwCEQIcAQIcc1wxDCP8UQwD8QP8AQKDXDKDXCKDXUKDXBKDXIKDXLKDXC
KDXFKDX9-f38KDXNKMA1xxDIH80QwB-BEB-HENsfxyHJEMAhwBDAIcgfwxDCP8UQwD-AEMA-KDXD
KDXCKDXUKDXBKDXIKDXLKDXCKDXFKDX9-f38KDXNKMA10Cg13Cg12Sg1xyg11yg1wyg1yyg1xyg1
wig11Cg1wSg1yCg1yyg1wig1xSg1-f39-Cg1zSjANdAoNdwoNdkoNcco2TXDKDXLKDUo2DXIKDXB
KDXIKDXLKDXCKDXFKDX9-f38KDXNKMA10Cg13Cg12Sg1yCjVNcYoNcsoNSg1xSg1wig1ySg1yCg1
wSg1yCg1yyg1wig1xSg1-f394yjINc0oNc0owDXQKDXcKDXZKDXIKDXTKDXGKDXLKDUoNcUoNcIo
NckoNcgo3DXCKDXFKDX9-f3jKDXGKDXNKDXNKMA10Cg13Cg12Sg1yCg10yg1xig1yyg1KDXFKDXC
KDXJKDXMKDXIKDXQKDXFKDX9-f3jKDXGKDXNKDXNKMA10Cg13Cg12Sg1yCg10yg1xig1yyg1KDXF
KDXCKDXJKDXMKDXIKDXQKDXFKDX9-f3jKDXGKDXNKDXNKMA10Cg13Cg12Sg1yCg10yg1xig1yyjJ
NcIoNckoNcwoNcgoNdAoNcUoNf39-eMoNcYoNc0o0DXQKDXcKNs1yCg10yg1xig1zSg1yig1ySg1
zCg1yCg10Cg1xSg1-f394yg1xig13ig10Cg1-cUoNdMoNcYoNc0oNcAo0jXAKDXMKDXIKDXQKDXF
KDX9-f3jKDXGKDXeKDXQKDX9xSg10yg1xig1zSg1wCg1xyg1xig1wCg1zCg1yCg10Cg1xSg1-f39
4yg1xig13ig10Cg13ijdNcQoNdMoNcYoNc0oNcAoNccoNcYoNcAoNcwoNcgoNdAoNcUoNf39-eMo
NcYoNd4oNdAoNdUozDXXKDXEKDXTKDXGKDXNKDXAKDXHKDXGKDXAKDXMKDXIKDXQKDXFKDX9-f3j
KMg13ijSNdUoNcYoNcEoNdcoNcQoNdMoNcYoNc0oNcAoNccoNcYoNcAoNcwoNcgoNdAoNcUoNf39
-f3NKNs1zig1xig1wSg11yg1xCg10yg1xig1zSg1wCg1xyg1xig1wCg1zCg1yCg10Cg1xSg1-f39
-c0oNdkoNc4oNcYoNcEoNdcoNcQoNdMoNcYoNc0oNcAoNccoNcYoNcAoNcwoNcgoNdAoNcUoNf39
-f3NKDXZKDXOKDXGKDXBKDXXKDXEKDXTKDXGKDXNKDXAKDXHKDXGKDXAKDXMKDXIKDXQKDXFKDX9
-f39zSg12Sg1zig1xig1wSg11yg1xCg10yg1xig1zSg1wCg1xyg1xig1wCg1zCg1yCg10Cg1xSg1
-f39-c0oNdkoNc4oNcYoNcEoNdcoNcQoNdMoNcYoNc0oNcAoNccoNcYoNcAoNcwoNcgoNdAoNcUo
Nf39-f3NKDXZKDXOKDXGKDXBKDXXKDXEKDXTKDXGKDXNKDXAKDXHKDXGKDXAKDXMKDXIKNo1-f39
-c0oNdkoNc4oNcYoNcEoNdcoNcQoNdMoNcYoNc0oNcAoNccoNcYoNcAoNcwoNdsoNf39-f3VKDXZ
KDXOKDXGKDXBKDXXKDXEKDXTKDXGKDXNKDXAKDXHKDXGKDXAKDXMKDXbKDX9-f391Sg12Sg1zig1
xig1wSg11yg1xCg10yg1xig1zSg1wCg1xyg1xig1wCg1zCg12yg1-f39-dUoNdkoNc4oNcYoNcEo
NdcoNcQoNdMoNcYoNc0oNcAoNccoNcYoNcAoNcwoNdsoNf39-f3VKDXZKDXOKDXGKDXBKDXXKDXE
KDXTKDXGKDXNKDXAKDXHKDXGKDXAKDXMKDXbKDX9-f391Sg12Sg1zijMNdcoNcQo1TXGKDXNKDXA
KDXHKDXGKDXAKDXMKN01-f39-dUoNdkoNdcoNdsoNeMoNc0oNcAoNccoNcYoNcAoNf39-f39xCg1
2Sg11yg12yg14yjoNf39-f39xCg12Sg11yg12yg19ijSNf39-f39xyg12Sg11yg12yg1-f39-f39
1Sg12Sg11yg12yg1-f39-f391Sg12Sg11yg1wSjZNf39-f39-dUoNdkoNdcoNcEoNdYowDX9-f39
-f3VKDXZKDXXKDXBKDXWKMA1-f39-f391Sg12Sg11yg1wSg11ijANf39-f39-dUoNdkoNdcoNcEo
NdYowDX9-f39-f3VKDXZKDXXKDXBKDXWKMA1-f39-f391Sg12Sg11yg1wSg11ijANf39-f39-dUo
NdkoNdcoNcEoNdYowDX9-f39-f3VKDXZKDXXKDXBKDXWKMA1-f39-f391Sg12Sg11yg1wSg11ijA
Nf39-f39-dUoNdkoNdco3TX9-f39-f3VKNs12yg11ig1-f39-f39-dIoNdYoNf39-f39-f3SKDXW
KDX9-f39-f390ig11ig1-f39-f39-dIoNdYoNf39-f39-f3SKDXWKDX9-f39-f390ig11ig1-f39
-f39-dIoNdYoNf39-f39-f3SKDXWKDX9-f39-f390ig11ig1-f39-f39-dIoNdYoNf39-f39-f3S
KDXWKDX9-f39-f390ig11ig1-f39-f39-dIoNdYoNf39-f39-f3SKNg1-f39-f39-f39-f39-f39
-f39-f39-f39-f39-f39-f39-f39-f39-f39-f3YAAAAAAAAAAE=
:: lib/
:: lib/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTEwLTI1IDIwOjUxOjQxIixtb2RpZmllZD0iMjAyNS0x
MC0yNSAyMTowNTo0NSJdXQ==
:: lib/locustron.lua
--- @diagnostic disable:unknown-symbol, action-after-return, exp-in-action, miss-symbol
-- Picotron Userdata-Optimized Spatial Hash
-- Uses Picotron userdata for efficient bounding box storage

local locus_optimized = function(size)
   size = size or 32
   local rows, pool = {}, {}

   -- Object ID System for userdata indexing
   local next_obj_id = 1
   local obj_to_id = {}
   local id_to_obj = {}

   local function get_obj_id(obj)
      local id = obj_to_id[obj]
      if not id then
         id = next_obj_id
         next_obj_id = next_obj_id + 1
         obj_to_id[obj] = id
         id_to_obj[id] = obj
      end
      return id
   end

   -- Userdata Bounding Box Storage
   local MAX_OBJECTS = 10000
   local bbox_count = 0
   local bbox_data = userdata("f32", MAX_OBJECTS * 4)
   local bbox_map = {} -- obj_id -> bbox_index mapping

   local function frompool()
      local tbl = next(pool)
      if tbl then
         pool[tbl] = nil
         return tbl
      end
      return {}
   end

   local function box2grid(x, y, w, h)
      local l = math.floor(x / size) + 1
      local t = math.floor(y / size) + 1
      local r = math.floor((x + w) / size) + 1
      local b = math.floor((y + h) / size) + 1
      return l, t, r, b
   end

   -- Optimized bounding box management with userdata
   local function store_bbox(obj, x, y, w, h)
      local obj_id = get_obj_id(obj)
      local index = bbox_map[obj_id]
      if not index then
         index = bbox_count
         bbox_count = bbox_count + 1
         bbox_map[obj_id] = index
      end

      local base = index * 4
      bbox_data[base] = x
      bbox_data[base + 1] = y
      bbox_data[base + 2] = w
      bbox_data[base + 3] = h
   end

   local function get_bbox(obj)
      local obj_id = get_obj_id(obj)
      local index = bbox_map[obj_id]
      if not index then return nil end
      local base = index * 4
      return bbox_data[base], bbox_data[base + 1],
         bbox_data[base + 2], bbox_data[base + 3]
   end

   local function remove_bbox(obj)
      local obj_id = obj_to_id[obj]
      if not obj_id then return end

      bbox_map[obj_id] = nil
      obj_to_id[obj] = nil
      id_to_obj[obj_id] = nil
   end

   -- Specialized functions maintain same logic but use optimized storage
   local function add_to_cells(obj, l, t, r, b)
      local obj_id = get_obj_id(obj)
      local row, cell
      for cy = t, b do
         if not rows[cy] then
            rows[cy] = frompool()
         end
         row = rows[cy]
         for cx = l, r do
            if not row[cx] then
               row[cx] = frompool()
            end
            row[cx][obj_id] = true -- Use object ID instead of object reference
         end
      end
   end

   local function del_from_cells(obj, l, t, r, b)
      local obj_id = obj_to_id[obj]
      if not obj_id then return end

      local row, cell
      for cy = t, b do
         row = rows[cy]
         if row then
            for cx = l, r do
               cell = row[cx]
               if cell then
                  cell[obj_id] = nil
               end
            end
         end
      end
   end

   local function free_empty_cells(l, t, r, b)
      local row, cell
      for cy = t, b do
         row = rows[cy]
         if row then
            for cx = l, r do
               cell = row[cx]
               if cell and not next(cell) then
                  row[cx], pool[cell] = nil, true
               end
            end
            if not next(row) then
               rows[cy], pool[row] = nil, true
            end
         end
      end
   end

   local function query_cells(result, l, t, r, b, filter)
      local row, cell
      for cy = t, b do
         row = rows[cy]
         if row then
            for cx = l, r do
               cell = row[cx]
               if cell then
                  for obj_id in pairs(cell) do
                     local obj = id_to_obj[obj_id]
                     if obj and not result[obj] then
                        if not filter or filter(obj) then
                           result[obj] = true
                        end
                     end
                  end
               end
            end
         end
      end
   end

   return {
      _bbox_data = bbox_data,
      _obj_count = function() return bbox_count end,
      _box2grid = box2grid,
      _pool = pool,
      _rows = rows,
      _size = size,

      add = function(obj, x, y, w, h)
         store_bbox(obj, x, y, w, h)
         add_to_cells(obj, box2grid(x, y, w, h))
         return obj
      end,

      del = function(obj)
         local x, y, w, h = get_bbox(obj)
         if not x then error("unknown object") end

         local l, t, r, b = box2grid(x, y, w, h)
         del_from_cells(obj, l, t, r, b)
         free_empty_cells(l, t, r, b)
         remove_bbox(obj)
         return obj
      end,

      update = function(obj, x, y, w, h)
         local old_x, old_y, old_w, old_h = get_bbox(obj)
         if not old_x then error("unknown object") end

         local l0, t0, r0, b0 = box2grid(old_x, old_y, old_w, old_h)
         local l1, t1, r1, b1 = box2grid(x, y, w, h)

         if l0 ~= l1 or t0 ~= t1 or r0 ~= r1 or b0 ~= b1 then
            del_from_cells(obj, l0, t0, r0, b0)
            add_to_cells(obj, l1, t1, r1, b1)
            free_empty_cells(l0, t0, r0, b0)
         end

         store_bbox(obj, x, y, w, h)
         return obj
      end,

      query = function(x, y, w, h, filter)
         local res = frompool()
         local l, t, r, b = box2grid(x, y, w, h)
         query_cells(res, l, t, r, b, filter)
         return res
      end,

      -- Debug information
      get_bbox = get_bbox,
      get_obj_id = get_obj_id
   }
end

return locus_optimized

:: lib/require.lua
--[[pod_format="raw",created="2025-10-25 11:53:08",modified="2025-10-25 11:53:08",revision=0]]
function require(name)
	if _modules == nil then
		_modules = {}
	end

	local already_imported = _modules[name]
	if already_imported ~= nil then
		return already_imported
	end

	local filename = fullpath(name..".lua")
	local src = fetch(filename)

	if (type(src) ~= "string") then
		notify("could not include "..filename)
		stop()
		return
	end

	-- https://www.lua.org/manual/5.4/manual.html#pdf-load
	-- chunk name (for error reporting), mode ("t" for text only -- no binary chunk loading), _ENV upvalue
	-- @ is a special character that tells debugger the string is a filename
	local func, err = load(src, "@"..filename, "t", _ENV)
	-- syntax error while loading
	if (not func) then
		-- printh("** syntax error in "..filename..": "..tostr(err))
		-- notify("syntax error in "..filename.."\n"..tostr(err))
		send_message(3, {event = "report_error", content = "*syntax error"})
		send_message(3, {event = "report_error", content = tostr(err)})

		stop()
		return
	end

	local module = func()
	_modules[name] = module

	return module
end

:: main.lua
--[[pod_format="raw",created="2025-10-25 11:34:13",modified="2025-10-25 20:50:17",revision=12]]
include("test_locustron.lua")
:: map/
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTEwLTEyIDE0OjQ5OjMwIixtb2RpZmllZD0iMjAyNS0x
MC0yNSAyMTowNTo0NSJdXQ==
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
MS0xNyAxMDozNzo0NCIscmV2aXNpb249MV1dbHo0AFQAAABEEAAA8Ah7e2JtcD11c2VyZGF0YSgi
aTE2IiwzMgMALyIwAQD--------------------7oSIpLHBhbl94PTAIANJ5PTAsdGlsZV9oPTE2
CgBgdz0xNn19
:: sfx/
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTEwLTEyIDE0OjQ5OjMwIixtb2RpZmllZD0iMjAyNS0x
MC0yNSAyMTowNTo0NSJdXQ==
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTMxIDA4OjMwOjI4Iixtb2RpZmllZD0iMjAyNS0w
Ny0zMSAwODozMDoyOCIscmV2aXNpb249MF1dbHo0AKAAAAALCgAA-zBweHUAAygAAAQABA9AEAIO
AAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv-J6oBEAYP
MBABIAEgAfAAAhACDhABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDjAA------_9
H-8BAKzPyA9AAA8QQP--sPD-AQD-6lD-----KQ==
:: test_locustron.lua
--[[pod_format="raw",created="2025-10-25 20:50:20",modified="2025-10-25 21:02:12",revision=6]]
include("lib/require.lua")
local locustron = require("lib/locustron")

local loc
local GRID_SIZE = 256                  -- Main grid display area
local GRID_X = 16                      -- Grid offset from left
local GRID_Y = 8                       -- Grid offset from top
local INFO_X = GRID_X + GRID_SIZE + 16 -- Info panel to the right of grid

local OBJECTS_MIN_WIDTH = 10
local OBJECTS_MAX_WIDTH = 32
local MAX_OBJECTS = 100
local viewport

function rand(low, hi)
   return flr(low + rnd(hi - low))
end

function _init()
   -- viewport. It's a rectangle that moves around, printing the objects it "sees" in color
   viewport = {x = 60, y = 60, w = 128, h = 128, dx = 2, dy = 1}

   loc = locustron(32)
   for _ = 1, MAX_OBJECTS do
      local w = rand(OBJECTS_MIN_WIDTH, OBJECTS_MAX_WIDTH)
      local obj = {
         x = rand(20, 220), -- Spread across the 256x256 grid area
         y = rand(20, 220),
         w = w,
         h = w,
         av = rnd(),
         r = rnd() * 2, -- Slightly more movement for the larger space
         col = rand(6, 15)
      }
      loc.add(obj, obj.x, obj.y, obj.w, obj.h)
   end
end

function _update()
   -- move all the objects in locus
   -- we use a bigger box than just the grid so that we also update the objects that
   -- are outside of the visible grid area
   for obj in pairs(loc.query(-64, -64, 384, 384)) do
      obj.x += sin(obj.av * t()) * obj.r
      obj.y += cos(obj.av * t()) * obj.r
      -- Use userdata-optimized update which leverages get_bbox internally
      loc.update(obj, obj.x, obj.y, obj.w, obj.h)
   end

   -- update the viewport within the grid bounds
   viewport.x += viewport.dx
   viewport.y += viewport.dy
   -- make the viewport bounce when it touches the grid borders
   if viewport.x < 0 or viewport.x + viewport.w > GRID_SIZE then
      viewport.dx *= -1
   end
   if viewport.y < 0 or viewport.y + viewport.h > GRID_SIZE then
      viewport.dy *= -1
   end
end

function draw_grid_cells(loc, color)
   local cl, ct, cr, cb = loc._box2grid(0, 0, GRID_SIZE, GRID_SIZE)
   local size = loc._size
   local row, cell

   -- draw the cells within the grid area
   for cy = ct, cb do
      row = loc._rows[cy]
      if row then
         for cx = cl, cr do
            cell = row[cx]
            if cell then
               local x, y = GRID_X + (cx - 1) * size, GRID_Y + (cy - 1) * size
               rrect(x, y, size, size)
               local count = 0
               for _ in pairs(cell) do count += 1 end
               print(count, x + 2, y + 2, color or 1)
            end
         end
      end
   end
end

function draw_locus(loc)
   -- draw the boxes containing each object (optimized for userdata)
   for obj in pairs(loc.query(-64, -64, 384, 384)) do
      local x, y, w, h = loc.get_bbox(obj)
      if x then
         rrect(GRID_X + x, GRID_Y + y, w, h)
      end
   end

   -- Draw information panel on the right side
   local info_y = 16
   local line_height = 12

   print("LOCUSTRON SPATIAL HASH", INFO_X, info_y, 11)
   info_y += line_height * 2

   print("Objects in locus: "..tostr(loc._obj_count()), INFO_X, info_y, 7)
   info_y += line_height

   local poolsize = 0
   for _ in pairs(loc._pool) do poolsize += 1 end
   print("Objects in pool: "..tostr(poolsize), INFO_X, info_y, 7)
   info_y += line_height * 2

   print("Grid size: "..tostr(loc._size).."px", INFO_X, info_y, 6)
   info_y += line_height

   print("Object size: min "..OBJECTS_MIN_WIDTH..", max "..OBJECTS_MAX_WIDTH, INFO_X, info_y, 6)
   info_y += line_height

   print("Display area: "..GRID_SIZE.."x"..GRID_SIZE, INFO_X, info_y, 6)
   info_y += line_height

   print("Viewport: "..viewport.w.."x"..viewport.h, INFO_X, info_y, 6)
   info_y += line_height * 2

   -- Performance info
   print("PERFORMANCE", INFO_X, info_y, 11)
   info_y += line_height

   print("CPU: "..tostr(flr(stat(1) * 10)).."%", INFO_X, info_y, 6)
   info_y += line_height

   print("MEM: "..tostr(flr(stat(3) / 1024)).." KB", INFO_X, info_y, 6)
   info_y += line_height

   local active_cells = 0
   for _ in pairs(loc._rows) do active_cells += 1 end
   print("Active rows: "..active_cells, INFO_X, info_y, 6)
   info_y += line_height
end

function _draw()
   cls()

   -- Draw grid border
   -- color(13)
   -- rrect(GRID_X - 1, GRID_Y - 1, GRID_SIZE + 2, GRID_SIZE + 2)

   -- draw locus in magenta
   color(1)
   draw_locus(loc)

   -- draw the viewport (translated to grid coordinates)
   color(10)
   rrect(GRID_X + viewport.x, GRID_Y + viewport.y, viewport.w, viewport.h)

   -- draw the objects that are visible through the viewport with rectfill+color
   -- Use userdata-optimized approach: get bbox coordinates directly from userdata
   clip(GRID_X + viewport.x, GRID_Y + viewport.y, viewport.w, viewport.h)
   for obj in pairs(loc.query(viewport.x, viewport.y, viewport.w, viewport.h)) do
      -- Leverage userdata bbox access for consistent coordinates
      local x, y, w, h = loc.get_bbox(obj)
      if x then
         rrectfill(GRID_X + x, GRID_Y + y, w, h, 0, obj.col)
      end
   end
   draw_grid_cells(loc, 13)
   clip()
end

:: [eoc]
